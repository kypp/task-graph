// Generated by CoffeeScript 1.6.3
(function() {
  var Node, canvas, cnv, context, currentNode, edgeproto, extedge, extending, keys, moving, posx, posy, resizeCanvas, startNode, travel,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  cnv = document.getElementById('canvas');

  context = cnv.getContext('2d');

  window.addEventListener('resize', resizeCanvas, false);

  resizeCanvas = function() {
    cnv.width = window.innerWidth;
    cnv.height = window.innerHeight;
    if (typeof canvas !== "undefined" && canvas !== null) {
      canvas.height = window.innerHeight;
      return canvas.width = window.innerWidth;
    }
  };

  resizeCanvas();

  canvas = oCanvas.create({
    canvas: "#canvas"
  });

  keys = [];

  canvas.bind("keydown keyup", function() {
    keys = canvas.keyboard.getKeysDown();
    if (__indexOf.call(keys, 32) >= 0) {
      return canvas.mouse.cursor("move");
    } else {
      return canvas.mouse.cursor("default");
    }
  });

  edgeproto = canvas.display.line({
    stroke: "7px #DDD",
    shadow: "0 0 5px #000",
    cap: "round",
    start: {
      x: 0,
      y: 0
    },
    end: {
      x: 0,
      y: 0
    }
  });

  extending = false;

  moving = false;

  startNode = null;

  currentNode = null;

  extedge = canvas.display.line({
    stroke: "7px #DDD",
    shadow: "0 0 5px #000",
    cap: "round",
    start: {
      x: 0,
      y: 0
    },
    end: {
      x: 0,
      y: 0
    }
  });

  canvas.bind("mousemove", function() {
    var edge, _i, _j, _len, _len1, _ref, _ref1;
    if (extending) {
      extedge.end = canvas.mouse;
      canvas.draw.redraw();
    }
    if (moving) {
      currentNode.picture.x = canvas.mouse.x;
      currentNode.picture.y = canvas.mouse.y;
      _ref = currentNode.inedges;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        edge = _ref[_i];
        edge.end = canvas.mouse;
      }
      _ref1 = currentNode.outedges;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        edge = _ref1[_j];
        edge.start = canvas.mouse;
      }
      return canvas.draw.redraw();
    }
  });

  canvas.bind("mouseup", function() {
    if (extending) {
      if (startNode !== currentNode && (startNode != null) && (currentNode != null)) {
        startNode.connect(currentNode);
      }
      extedge.remove();
      extending = false;
    }
    if (moving) {
      return moving = false;
    }
  });

  travel = false;

  posx = posy = 0;

  canvas.bind("mousedown", function() {
    var obj, _i, _len, _ref, _results;
    if (__indexOf.call(keys, 32) >= 0) {
      travel = true;
      posx = canvas.mouse.x;
      posy = canvas.mouse.y;
      _ref = canvas.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        obj._prevx = obj.x;
        _results.push(obj._prevy = obj.y);
      }
      return _results;
    }
  });

  canvas.bind("mousemove", function() {
    var obj, _i, _len, _ref;
    if (travel) {
      _ref = canvas.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        obj.x = obj._prevx - posx + canvas.mouse.x;
        obj.y = obj._prevy - posy + canvas.mouse.y;
      }
      return canvas.draw.redraw();
    }
  });

  canvas.bind("mouseup", function() {
    if (travel) {
      return travel = false;
    }
  });

  Node = (function() {
    function Node(name, x, y) {
      this.name = name;
      this.x = x;
      this.y = y;
      this.inedges = [];
      this.outedges = [];
      this.picture = canvas.display.ellipse({
        x: x,
        y: y,
        radius: 20,
        fill: "#FFF",
        shadow: "0 0 10px #000",
        node: this
      });
      this.arc = canvas.display.arc({
        x: 0,
        y: 0,
        start: 0,
        end: 360,
        radius: 20,
        shadow: "0 0 10px #000"
      });
      this.setcompletion("unstarted");
      this.text = canvas.display.text({
        x: 0,
        y: 30,
        origin: {
          x: "center",
          y: "top"
        },
        font: "bold 20px sans-serif",
        shadow: "0 0 5px #000",
        text: this.name,
        fill: "#0aa"
      });
      canvas.addChild(this.picture);
      this.picture.addChild(this.text);
      this.picture.addChild(this.arc);
      this.initgui();
      this.initbindings();
    }

    Node.prototype.connect = function(node) {
      var edge;
      edge = canvas.display.line({
        stroke: "7px #DDD",
        shadow: "0 0 5px #000",
        cap: "round",
        start: this.picture,
        end: node.picture
      });
      this.outedges.push(edge);
      node.inedges.push(edge);
      edge.add();
      return edge.zIndex = "back";
    };

    Node.prototype.initbindings = function() {
      this.picture.bind("mousedown", function() {
        if (__indexOf.call(keys, 32) < 0 && __indexOf.call(keys, 16) < 0) {
          moving = true;
          return currentNode = this.node;
        } else if (__indexOf.call(keys, 16) >= 0) {
          startNode = this.node;
          extedge.start = this;
          extedge.end = this;
          extedge.zIndex = "back";
          extedge.add();
          return extending = true;
        }
      });
      this.picture.bind("mouseenter", function() {
        if (!moving) {
          currentNode = this.node;
        }
        return this.node.showgui();
      });
      this.picture.bind("mouseleave", function() {
        if (extending) {
          currentNode = null;
        }
        this.delay(500);
        return this.node.hidegui();
      });
      this.red.bind("click", function() {
        return this.node.setcompletion("unstarted");
      });
      this.green.bind("click", function() {
        return this.node.setcompletion("completed");
      });
      return this.orange.bind("click", function() {
        return this.node.setcompletion("started");
      });
    };

    Node.prototype.initgui = function() {
      this.red = canvas.display.ellipse({
        x: 10,
        y: -20,
        radius: 10,
        fill: "rgb(255,0,0)",
        shadow: "0 0 5px #000",
        node: this
      });
      this.orange = canvas.display.ellipse({
        x: 15,
        y: -10,
        radius: 10,
        fill: "rgb(255,140,0)",
        shadow: "0 0 5px #000",
        node: this
      });
      return this.green = canvas.display.ellipse({
        x: 20,
        y: 0,
        radius: 10,
        fill: "rgb(0,255,0)",
        shadow: "0 0 5px #000",
        node: this
      });
    };

    Node.prototype.showgui = function() {
      this.picture.addChild(this.red);
      this.picture.addChild(this.orange);
      return this.picture.addChild(this.green);
    };

    Node.prototype.hidegui = function() {
      this.picture.removeChild(this.red);
      this.picture.removeChild(this.orange);
      return this.picture.removeChild(this.green);
    };

    Node.prototype.setcompletion = function(s) {
      switch (s) {
        case "unstarted":
          this.arc.stroke = "5px #F00";
          break;
        case "started":
          this.arc.stroke = "5px rgb(255,140,0)";
          break;
        case "completed":
          this.arc.stroke = "5px #0F0";
      }
      return canvas.draw.redraw();
    };

    return Node;

  })();

  canvas.bind("dblclick", function() {
    var name;
    name = document.getElementById("intext").value;
    return new Node(name, canvas.mouse.x, canvas.mouse.y);
  });

}).call(this);
